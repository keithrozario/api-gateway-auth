AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API

Parameters:
  HostedZoneId:
    Type: String
    Description: Hosted zone where record set needs to be created
    Default: Z03421323DRTNW5BL35FQ
  ProxyDomainName:
    Type: String
    Description: Custom domain name for Proxy
    Default: proxy.waf-demo.keithrozario.com
  ProxyTruststore:
    Type: String
    Description: Key for trust store file
    Default: truststoreproxy.pem
  BackendDomainName:
    Type: String
    Description: Custom domain name for Backend
    Default: backend.waf-demo.keithrozario.com
  BackendTrustStore:
    Type: String
    Description: Backend TrustStore
    Default: truststorebackend.pem


Resources:
  PrivateCA:
    Type: AWS::ACMPCA::CertificateAuthority
    Properties:
      KeyAlgorithm: RSA_2048
      SigningAlgorithm: SHA256WITHRSA
      Subject:
        CommonName: !Sub "${AWS::StackName}-rootca"
      Type: ROOT

  PrivateCACertificate:
    Type: AWS::ACMPCA::Certificate
    Properties:
      CertificateAuthorityArn: !Ref PrivateCA
      CertificateSigningRequest: !GetAtt PrivateCA.CertificateSigningRequest
      SigningAlgorithm: SHA256WITHRSA
      TemplateArn: 'arn:aws:acm-pca:::template/RootCACertificate/V1'
      Validity:
        Type: YEARS
        Value: 10

  PrivateCAActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      Certificate: !GetAtt PrivateCACertificate.Certificate
      CertificateAuthorityArn: !Ref PrivateCA
      Status: ACTIVE

  MtlsCA:
    Type: AWS::ACMPCA::CertificateAuthority
    Properties:
      Type: SUBORDINATE
      KeyAlgorithm: RSA_2048
      SigningAlgorithm: SHA256WITHRSA
      Subject:
        CommonName: !Sub "${AWS::StackName}-mtlsca"

  MtlsCertificate:
    DependsOn: PrivateCAActivation
    Type: AWS::ACMPCA::Certificate
    Properties:
      CertificateAuthorityArn: !Ref PrivateCA
      CertificateSigningRequest: !GetAtt MtlsCA.CertificateSigningRequest
      SigningAlgorithm: SHA256WITHRSA
      TemplateArn: 'arn:aws:acm-pca:::template/SubordinateCACertificate_PathLen3/V1'
      Validity:
        Type: YEARS
        Value: 3

  MtlsActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      CertificateAuthorityArn: !Ref MtlsCA
      Certificate: !GetAtt MtlsCertificate.Certificate
      CertificateChain: !GetAtt PrivateCAActivation.CompleteCertificateChain
      Status: ACTIVE

  ClientOneCert:
    DependsOn: MtlsActivation
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateAuthorityArn: !Ref MtlsCA
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref ProxyDomainName
      Tags:
        - Key: Name
          Value: ClientOneCert

  TrustStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  TrustedStoreProxy:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrustedStoreProxy
      Timeout: 10
      MemorySize: 256
      Runtime: python3.9
      Description: Generate Trust Store for Proxy API
      CodeUri: python_functions/
      Handler: generate_pem_proxy.main
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref TrustStoreBucket
      Layers:
          - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:22
          - !Sub arn:aws:lambda:${AWS::Region}:770693421928:layer:Klayers-p39-crhelper:1

  TrustedStoreProxyUpload:
    Type: Custom::TrustedStoreProxy
    Properties:
      ServiceToken: !GetAtt TrustedStoreProxy.Arn
      TrustStoreBucket: !Ref TrustStoreBucket
      TrustStoreKey: !Ref ProxyTruststore
      Certs:
        - !GetAtt MtlsCertificate.Certificate
        - !GetAtt PrivateCACertificate.Certificate

  ProxyDomainCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref ProxyDomainName
      DomainValidationOptions:
        - DomainName: !Ref ProxyDomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  BackendDomainCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref BackendDomainName
      DomainValidationOptions:
        - DomainName: !Ref BackendDomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  ProxyApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: proxyAPI
      DisableExecuteApiEndpoint: true

  Resource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ProxyApi.RootResourceId
      RestApiId: !Ref ProxyApi
      PathPart: '{proxy+}'

  RootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt ProxyApi.RootResourceId
      RestApiId: !Ref ProxyApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub https://${BackendDomainName}/
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200

  ProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref Resource
      RestApiId: !Ref ProxyApi
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub https://${BackendDomainName}/
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200

  ProxyDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref ProxyDomainCert
      DomainName: !Ref ProxyDomainName
      EndpointConfiguration: 
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
      MutualTlsAuthentication:
        TruststoreUri: !GetAtt TrustedStoreProxyUpload.TrustStoreUri
        TruststoreVersion: !GetAtt TrustedStoreProxyUpload.ObjectVersion
  
  ProxyBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      DomainName: !Ref ProxyDomainName
      RestApiId: !Ref ProxyApi
      Stage: demo
    DependsOn: ProxyApiRoute53RecordSetGroup

  ProxyDeployment:
    DependsOn:
      - RootMethod
      - ProxyMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ProxyApi
      StageName: demo
      StageDescription:
        ClientCertificateId: !GetAtt ProxyApiClientCert.ClientCertificateId
        Description: ProxyApiStage

  ProxyApiRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub ${ProxyDomainName}. 
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ProxyDomain.RegionalHostedZoneId
            DNSName: !GetAtt ProxyDomain.RegionalDomainName

  ProxyApiClientCert:
    Type: AWS::ApiGateway::ClientCertificate
    Properties: 
      Description: proxyAPIClientCert

  TrustedStoreBackend:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrustedStoreBackend
      Description: Generate Trusted Store for Backend
      Timeout: 10
      MemorySize: 256
      Runtime: python3.9
      CodeUri: python_functions/
      Handler: generate_pem_backend.main
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref TrustStoreBucket
        - Statement:
          - Sid: getClientCertificatePublicKey
            Effect: Allow
            Action:
            - apigateway:GET
            Resource: !Sub arn:aws:apigateway:${AWS::Region}::/clientcertificates/*
      Layers:
          - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:22
          - !Sub arn:aws:lambda:${AWS::Region}:770693421928:layer:Klayers-p39-crhelper:1

  TrustedStoreBackendUploadFunction:
    Type: Custom::TrustedStoreBackend
    Properties:
      ServiceToken: !GetAtt  TrustedStoreBackend.Arn
      TrustStoreBucket: !Ref TrustStoreBucket
      TrustStoreKey: !Ref BackendTrustStore
      ClientCertificateId: !GetAtt ProxyApiClientCert.ClientCertificateId

  BackendRestApi:
    Type: AWS::Serverless::Api
    DependsOn: TrustedStoreBackendUploadFunction
    Properties:
      Name: mtlsApi
      Cors:
        AllowMethods:
          - GET
      Domain:
        CertificateArn: !Ref BackendDomainCert
        DomainName: !Ref BackendDomainName
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        MutualTlsAuthentication:
          TruststoreUri: !GetAtt TrustedStoreBackendUploadFunction.TrustStoreUri
          TruststoreVersion: !GetAtt TrustedStoreBackendUploadFunction.ObjectVersion
        Route53:
          EvaluateTargetHealth: False
          HostedZoneId: !Ref HostedZoneId
      DisableExecuteApiEndpoint: true
      StageName: demo

  BackendLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: httpResponse
      Timeout: 29
      MemorySize: 256
      Runtime: python3.9
      CodeUri: python_functions/
      Handler: api_response.main
      Events:
        RootGet:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref BackendRestApi


Outputs:
  ClientOneCertArn:
    Description: "Arn for client certificate"
    Value: !Ref ClientOneCert
  # ProxyCertArn:
  #   Description: "Arn for proxy certificate"
  #   Value: !Ref CustomDomainCert
  # ProxyCertificateId:
  #   Description: "Proxy Certificate ID"
  #   Value: !GetAtt ProxyApiClientCert.ClientCertificateId

